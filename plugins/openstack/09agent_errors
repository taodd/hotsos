#!/usr/bin/python3
import os

from common import (
    constants,
    searchtools,
    plugin_yaml,
)
from common.known_bugs_utils import add_known_bug
from openstack_common import (
    OPENSTACK_AGENT_ERROR_KEY_BY_TIME as AGENT_ERROR_KEY_BY_TIME,
    NEUTRON_LOGS,
    NOVA_LOGS,
)
from openstack_utils import (
    get_agent_exceptions,
)

AGENT_ERROR_INFO = {}

AGENT_NAMES = {"neutron": ["neutron-openvswitch-agent", "neutron-dhcp-agent",
                           "neutron-l3-agent", "neutron-server"],
               "nova": ["nova-compute", "nova-scheduler", "nova-conductor",
                        "nova-api-os-compute", "nova-api-wsgi"]}
AGENT_LOGS = {"neutron": NEUTRON_LOGS,
              "nova": NOVA_LOGS}
AGENT_EXCEPTIONS_COMMON = [r"(DBConnectionError)", r"(MessagingTimeout)",
                           r"(AMQP server on .+ is unreachable)",
                           r"(amqp.exceptions.ConnectionForced):",
                           r"(OSError: Server unexpectedly closed connection)",
                           r"(ConnectionResetError: .+)"]
AGENTS_EXCEPTIONS = {"nova": AGENT_EXCEPTIONS_COMMON + [
                     r"(nova.exception.\S+):"],
                     "neutron": AGENT_EXCEPTIONS_COMMON + [
                     r"(OVS is dead).", r"(RuntimeError):"]}


def add_agent_terms(searcher, service):
    data_source_template = os.path.join(constants.DATA_ROOT,
                                        AGENT_LOGS[service], '{}.log')
    if constants.USE_ALL_LOGS:
        data_source_template = "{}*".format(data_source_template)

    for agent in AGENT_NAMES[service]:
        data_source = data_source_template.format(agent)
        for exc_type in AGENTS_EXCEPTIONS[service]:
            rexpr = r"^([0-9\-]+) (\S+) .+{}.*".format(exc_type)
            searcher.add_search_term(rexpr, [1, 2, 3], data_source, tag=agent,
                                     hint=exc_type)


def add_bug_search_terms(searcher):
    data_source = os.path.join(constants.DATA_ROOT, 'var/log/syslog')
    if constants.USE_ALL_LOGS:
        data_source = "{}*".format(data_source)

    searcher.add_search_term(".+Unknown configuration entry 'no_track' for "
                             "ip address - ignoring.*", [0], data_source,
                             tag="1896506")


def process_bug_results(results, tag):
    if results.find_by_tag(tag):
        add_known_bug(tag)


def process_results(results, service):
    for agent in AGENT_NAMES[service]:
        e = get_agent_exceptions(results.find_by_tag(agent),
                                 AGENT_ERROR_KEY_BY_TIME)
        if e:
            if service not in AGENT_ERROR_INFO:
                AGENT_ERROR_INFO[service] = {}

            AGENT_ERROR_INFO[service][agent] = e


def get_agents_exceptions():
    s = searchtools.FileSearcher()
    add_agent_terms(s, "neutron")
    add_agent_terms(s, "nova")
    add_bug_search_terms(s)
    results = s.search()
    process_results(results, "neutron")
    process_results(results, "nova")
    process_bug_results(results, "1896506")


if __name__ == "__main__":
    get_agents_exceptions()
    if AGENT_ERROR_INFO:
        AGENT_ERROR_INFO = {"agent-errors": AGENT_ERROR_INFO}
        plugin_yaml.dump(AGENT_ERROR_INFO)
